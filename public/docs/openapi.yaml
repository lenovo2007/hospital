openapi: 3.0.3
info:
  title: Almacen Principal
  description: |
    API para gestión de usuarios con autenticación por tokens (Laravel Sanctum).
    Respuestas JSON unificadas `{status, mensaje, data}`.
    Importante: todos los resultados (éxito y error) devuelven HTTP 200. Los errores se indican con `status=false` y un `mensaje` descriptivo.
    Nota: cuando un listado no tiene resultados o un recurso no existe, la API responde HTTP 200 con `status=true`, `data` vacío o `null` según aplique y `mensaje` "<modelo> no encontrado" (por ejemplo: "hospitales no encontrado").
  version: 1.0.0
servers:
  - url: https://almacen.alwaysdata.net
    description: Producción (AlwaysData)
  - url: http://localhost
    description: Desarrollo local
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    StandardResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        mensaje:
          type: string
          example: Operación exitosa.
        autenticacion:
          type: integer
          description: 0=autenticado/válido, 1=token inválido/ausente, 2=token expirado
          enum: [0, 1, 2]
          example: 0
        data:
          nullable: true
    ErrorResponse:
      type: object
      properties:
        status:
          type: boolean
          example: false
          type: string
          example: No autenticado. Token inválido o ausente.
        autenticacion:
          type: integer
          description: 0=autenticado/válido, 1=token inválido/ausente, 2=token expirado
          enum: [0, 1, 2]
          example: 0
        data:
          nullable: true
    LoteGrupo:
      type: object
      properties:
        id: { type: integer }
        codigo: { type: string, description: "Código único del grupo (cod001, cod002, etc.)" }
        lote_id: { type: integer }
        cantidad: { type: integer }
        status: { type: string, enum: [activo, inactivo], default: activo }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    LoteGrupoRequest:
      type: object
      required: [lote_id, cantidad]
      properties:
        lote_id: { type: integer, description: "ID del lote" }
        cantidad: { type: integer, minimum: 1, description: "Cantidad de items en el grupo" }
        codigo: { type: string, description: "Código único del grupo (opcional, se genera automáticamente)" }
    LoteGrupoMovimientoRequest:
      type: object
      required: [items]
      properties:
        items:
          type: array
          minItems: 1
          items:
            type: object
            required: [lote_id, cantidad]
            properties:
              lote_id: { type: integer, description: "ID del lote" }
              cantidad: { type: integer, minimum: 1, description: "Cantidad" }
    PaginatedLoteGrupos:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LoteGrupo'
        current_page: { type: integer }
        last_page: { type: integer }
        per_page: { type: integer }
        total: { type: integer }
security:
  - bearerAuth: []
  /api/lote-grupo:
    get:
      summary: Listar grupos de lote
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      parameters:
        - name: codigo
          in: query
          required: false
          schema: { type: string }
          description: Filtrar por código de grupo
        - name: lote_id
          in: query
          required: false
          schema: { type: integer }
          description: Filtrar por ID de lote
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [activo, inactivo]
          description: Filtrar por estado
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
            enum: [codigo, cantidad, status, created_at]
          description: Campo por el cual ordenar
        - name: sort_direction
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
          description: Dirección del ordenamiento
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
          description: Número de elementos por página
      responses:
        '200':
          description: Lista de grupos de lote
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PaginatedLoteGrupos'
    post:
      summary: Crear grupo de lote
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoteGrupoRequest'
      responses:
        '201':
          description: Grupo de lote creado
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoteGrupo'

  /api/lote-grupo/crear-desde-movimiento:
    post:
      summary: Crear grupo de lote desde items de movimiento
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoteGrupoMovimientoRequest'
      responses:
        '201':
          description: Grupo de lote creado desde movimiento
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          codigo: { type: string }
                          items: { type: array, items: { $ref: '#/components/schemas/LoteGrupo' } }
                          total_items: { type: integer }

  /api/lote-grupo/{codigo}:
    get:
      summary: Ver detalle de grupo de lote por código
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      parameters:
        - name: codigo
          in: path
          required: true
          schema: { type: string }
          description: Código del grupo de lote
      responses:
        '200':
          description: Detalle del grupo de lote
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          codigo: { type: string }
                          items: { type: array, items: { $ref: '#/components/schemas/LoteGrupo' } }
                          total_items: { type: integer }
                          cantidad_total: { type: integer }

  /api/lote-grupo/{id}:
    put:
      summary: Actualizar grupo de lote
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
          description: ID del grupo de lote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cantidad: { type: integer, minimum: 1 }
                status: { type: string, enum: [activo, inactivo] }
      responses:
        '200':
          description: Grupo de lote actualizado
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoteGrupo'
    delete:
      summary: Eliminar grupo de lote (cambiar estado a inactivo)
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
          description: ID del grupo de lote
      responses:
        '200':
          description: Grupo de lote eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/lote-grupo/estadisticas:
    get:
      summary: Obtener estadísticas de grupos de lote
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [activo, inactivo]
          description: Filtrar por estado
      responses:
        '200':
          description: Estadísticas de grupos de lote
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          total_grupos: { type: integer }
                          total_items: { type: integer }
                          cantidad_total: { type: integer }
                          grupos_activos: { type: integer }
                          grupos_inactivos: { type: integer }
