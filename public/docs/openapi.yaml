openapi: 3.1.0
info:
  title: Almacen Principal
  description: |
    API para gestión de usuarios con autenticación por tokens (Laravel Sanctum).
    Respuestas JSON unificadas `{status, mensaje, data}`.
  version: 1.0.0
servers:
  - url: http://localhost
    description: Desarrollo local
  - url: https://almacen.alwaysdata.net
    description: Producción

security:
  - bearerAuth: []

paths:
  # ========================================
  # AUTENTICACIÓN
  # ========================================
  /api/login:
    post:
      summary: Iniciar sesión
      tags: [Autenticación]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
      responses:
        '200':
          description: Sesión iniciada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/logout:
    post:
      summary: Cerrar sesión
      tags: [Autenticación]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sesión cerrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/me:
    get:
      summary: Información del usuario autenticado
      tags: [Autenticación]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Datos del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/users/password/forgot:
    post:
      summary: Solicitar restablecimiento de contraseña
      tags: [Autenticación]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
      responses:
        '200':
          description: Token de restablecimiento enviado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/users/password/reset:
    post:
      summary: Restablecer contraseña con token
      tags: [Autenticación]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token: { type: string }
                password: { type: string, format: password }
                password_confirmation: { type: string, format: password }
      responses:
        '200':
          description: Contraseña restablecida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # USUARIOS
  # ========================================
  /api/users:
    get:
      summary: Listar usuarios
      tags: [Usuarios]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listado de usuarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    post:
      summary: Crear usuario
      tags: [Usuarios]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Usuario creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/users/{id}:
    get:
      summary: Ver detalle de usuario
      tags: [Usuarios]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Detalle del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar usuario
      tags: [Usuarios]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Usuario actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    delete:
      summary: Eliminar usuario
      tags: [Usuarios]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Usuario eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/users/email/{email}:
    get:
      summary: Ver usuario por email
      tags: [Usuarios]
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          schema: { type: string, format: email }
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar usuario por email
      tags: [Usuarios]
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          schema: { type: string, format: email }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Usuario actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/users/email/{email}/password:
    put:
      summary: Cambiar contraseña por email
      tags: [Usuarios]
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          schema: { type: string, format: email }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password: { type: string, format: password }
      responses:
        '200':
          description: Contraseña actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/users/cedula/{cedula}:
    get:
      summary: Ver usuario por cédula
      tags: [Usuarios]
      security:
        - bearerAuth: []
      parameters:
        - name: cedula
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar usuario por cédula
      tags: [Usuarios]
      security:
        - bearerAuth: []
      parameters:
        - name: cedula
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Usuario actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/users/cedula/{cedula}/password:
    put:
      summary: Cambiar contraseña por cédula
      tags: [Usuarios]
      security:
        - bearerAuth: []
      parameters:
        - name: cedula
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password: { type: string, format: password }
      responses:
        '200':
          description: Contraseña actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # HOSPITALES
  # ========================================
  /api/hospitales:
    get:
      summary: Listar hospitales
      tags: [Hospitales]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listado de hospitales
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    post:
      summary: Crear hospital
      tags: [Hospitales]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HospitalRequest'
      responses:
        '201':
          description: Hospital creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/hospitales/{id}:
    get:
      summary: Ver detalle de hospital
      tags: [Hospitales]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Detalle del hospital
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar hospital
      tags: [Hospitales]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HospitalRequest'
      responses:
        '200':
          description: Hospital actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    delete:
      summary: Eliminar hospital
      tags: [Hospitales]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Hospital eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/hospitales/rif/{rif}:
    get:
      summary: Ver hospital por RIF
      tags: [Hospitales]
      security:
        - bearerAuth: []
      parameters:
        - name: rif
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Hospital encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar hospital por RIF
      tags: [Hospitales]
      security:
        - bearerAuth: []
      parameters:
        - name: rif
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HospitalRequest'
      responses:
        '200':
          description: Hospital actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/hospitales/buscar_por_rif:
    get:
      summary: Buscar hospital por RIF
      tags: [Hospitales]
      security:
        - bearerAuth: []
      parameters:
        - name: rif
          in: query
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Hospital encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # SEDES
  # ========================================
  /api/sedes:
    get:
      summary: Listar sedes
      tags: [Sedes]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listado de sedes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    post:
      summary: Crear sede
      tags: [Sedes]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SedeRequest'
      responses:
        '201':
          description: Sede creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/sedes/{id}:
    get:
      summary: Ver detalle de sede
      tags: [Sedes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Detalle de la sede
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar sede
      tags: [Sedes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SedeRequest'
      responses:
        '200':
          description: Sede actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    delete:
      summary: Eliminar sede
      tags: [Sedes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Sede eliminada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/sedes/hospital/{id}:
    get:
      summary: Listar sedes por hospital
      tags: [Sedes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Sedes del hospital
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # ALMACENES PRINCIPALES
  # ========================================
  /api/almacenes_principales:
    get:
      summary: Listar almacenes principales
      tags: [Almacenes Principales]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listado de almacenes principales
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    post:
      summary: Crear almacén principal
      tags: [Almacenes Principales]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlmacenPrincipalRequest'
      responses:
        '201':
          description: Almacén principal creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/almacenes_principales/{id}:
    get:
      summary: Ver detalle de almacén principal
      tags: [Almacenes Principales]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Detalle del almacén principal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar almacén principal
      tags: [Almacenes Principales]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlmacenPrincipalRequest'
      responses:
        '200':
          description: Almacén principal actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    delete:
      summary: Eliminar almacén principal
      tags: [Almacenes Principales]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Almacén principal eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # ALMACENES CENTRALES
  # ========================================
  /api/almacenes_centrales:
    get:
      summary: Listar almacenes centrales
      tags: [Almacenes Centrales]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listado de almacenes centrales
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    post:
      summary: Crear almacén central
      tags: [Almacenes Centrales]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlmacenCentralRequest'
      responses:
        '201':
          description: Almacén central creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/almacenes_centrales/{id}:
    get:
      summary: Ver detalle de almacén central
      tags: [Almacenes Centrales]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Detalle del almacén central
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar almacén central
      tags: [Almacenes Centrales]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlmacenCentralRequest'
      responses:
        '200':
          description: Almacén central actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    delete:
      summary: Eliminar almacén central
      tags: [Almacenes Centrales]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Almacén central eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # ALMACENES DE FARMACIA
  # ========================================
  /api/almacenes_farmacia:
    get:
      summary: Listar almacenes de farmacia
      tags: [Almacenes Farmacia]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listado de almacenes de farmacia
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    post:
      summary: Crear almacén de farmacia
      tags: [Almacenes Farmacia]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlmacenFarmaciaRequest'
      responses:
        '201':
          description: Almacén de farmacia creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/almacenes_farmacia/{id}:
    get:
      summary: Ver detalle de almacén de farmacia
      tags: [Almacenes Farmacia]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Detalle del almacén de farmacia
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar almacén de farmacia
      tags: [Almacenes Farmacia]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlmacenFarmaciaRequest'
      responses:
        '200':
          description: Almacén de farmacia actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    delete:
      summary: Eliminar almacén de farmacia
      tags: [Almacenes Farmacia]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Almacén de farmacia eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # ALMACENES PARALELOS
  # ========================================
  /api/almacenes_paralelo:
    get:
      summary: Listar almacenes paralelos
      tags: [Almacenes Paralelos]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listado de almacenes paralelos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    post:
      summary: Crear almacén paralelo
      tags: [Almacenes Paralelos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlmacenParaleloRequest'
      responses:
        '201':
          description: Almacén paralelo creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/almacenes_paralelo/{id}:
    get:
      summary: Ver detalle de almacén paralelo
      tags: [Almacenes Paralelos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Detalle del almacén paralelo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar almacén paralelo
      tags: [Almacenes Paralelos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlmacenParaleloRequest'
      responses:
        '200':
          description: Almacén paralelo actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    delete:
      summary: Eliminar almacén paralelo
      tags: [Almacenes Paralelos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Almacén paralelo eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # ALMACENES SERVICIOS ATENCIONES
  # ========================================
  /api/almacenes_servicios_atenciones:
    get:
      summary: Listar almacenes de servicios de atenciones
      tags: [Almacenes Servicios Atenciones]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listado de almacenes de servicios de atenciones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    post:
      summary: Crear almacén de servicios de atenciones
      tags: [Almacenes Servicios Atenciones]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlmacenServiciosAtencionesRequest'
      responses:
        '201':
          description: Almacén de servicios de atenciones creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/almacenes_servicios_atenciones/{id}:
    get:
      summary: Ver detalle de almacén de servicios de atenciones
      tags: [Almacenes Servicios Atenciones]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Detalle del almacén de servicios de atenciones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar almacén de servicios de atenciones
      tags: [Almacenes Servicios Atenciones]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlmacenServiciosAtencionesRequest'
      responses:
        '200':
          description: Almacén de servicios de atenciones actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    delete:
      summary: Eliminar almacén de servicios de atenciones
      tags: [Almacenes Servicios Atenciones]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Almacén de servicios de atenciones eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # ALMACENES SERVICIOS APOYO
  # ========================================
  /api/almacenes_servicios_apoyo:
    get:
      summary: Listar almacenes de servicios de apoyo
      tags: [Almacenes Servicios Apoyo]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listado de almacenes de servicios de apoyo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    post:
      summary: Crear almacén de servicios de apoyo
      tags: [Almacenes Servicios Apoyo]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlmacenServiciosApoyoRequest'
      responses:
        '201':
          description: Almacén de servicios de apoyo creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/almacenes_servicios_apoyo/{id}:
    get:
      summary: Ver detalle de almacén de servicios de apoyo
      tags: [Almacenes Servicios Apoyo]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Detalle del almacén de servicios de apoyo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar almacén de servicios de apoyo
      tags: [Almacenes Servicios Apoyo]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlmacenServiciosApoyoRequest'
      responses:
        '200':
          description: Almacén de servicios de apoyo actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    delete:
      summary: Eliminar almacén de servicios de apoyo
      tags: [Almacenes Servicios Apoyo]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Almacén de servicios de apoyo eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # INSUMOS
  # ========================================
  /api/insumos:
    get:
      summary: Listar insumos
      tags: [Insumos]
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [activo, inactivo, todos]
            default: activo
      responses:
        '200':
          description: Listado de insumos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/movimiento/almacen/salida:
    post:
      summary: Registrar salida de almacén
      description: |
        Registra un movimiento de salida desde un almacén de origen hacia un almacén de destino.
        
        **Funcionalidad:**
        - Crea un grupo de lotes con un código único (`codigo_grupo`) en la tabla `lotes_grupos`
        - Genera un movimiento de stock con estado "pendiente" en la tabla `movimientos_stock`
        - Registra la suma total de cantidades de todos los items en el campo `cantidad_salida_total`
        - **Descuenta las cantidades del almacén de origen**
        - Actualiza el status a `false` si la cantidad llega a 0
        
        **Validaciones:**
        - Todos los lotes deben existir en el almacén central del hospital/sede origen
        - Debe haber stock suficiente para cada lote
        - Los lotes deben tener status `true` (activos)
        
        **Campos requeridos:**
        - IDs de hospital y sede de origen y destino
        - Tipos de almacén de origen y destino
        - Lista de items con lote_id y cantidad
        
        **Respuesta exitosa:** Retorna el `codigo_grupo` generado para el movimiento.
      tags: [Movimientos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovimientoCentralSalidaRequest'
            examples:
              despacho-multiple:
                value:
                  origen_hospital_id: 1
                  origen_sede_id: 1
                  destino_hospital_id: 2
                  destino_sede_id: 2
                  origen_almacen_tipo: almacenCent
                  destino_almacen_tipo: almacenPrin
                  tipo_movimiento: despacho
                  fecha_despacho: '2025-09-29'
                  observaciones: 'Despacho de insumos médicos'
                  items:
                    - lote_id: 1
                      cantidad: 200
                    - lote_id: 2
                      cantidad: 100
      responses:
        '200':
          description: Respuesta del endpoint (éxito o error con status=false)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
              examples:
                exito:
                  value:
                    status: true
                    mensaje: Movimiento desde central aplicado.
                    data:
                      codigo_grupo: cod001
                validacion-error:
                  value:
                    status: false
                    mensaje: "Los datos proporcionados no son válidos."
                    errors:
                      origen_hospital_id: ["El campo origen hospital id es obligatorio."]
                      origen_almacen_tipo: ["El campo origen almacen tipo es obligatorio."]
                      items: ["El campo items debe contener al menos 1 elementos."]
                stock-insuficiente:
                  value:
                    status: false
                    mensaje: "Stock insuficiente en el almacén central para el lote 1. Disponible: 50, Solicitado: 200"
                    data: null
                lote-no-encontrado:
                  value:
                    status: false
                    mensaje: "No se encontró el lote 2 en el almacén central para el hospital 1 y sede 1."
                    data: null
                error-inesperado:
                  value:
                    status: false
                    mensaje: "Error inesperado al registrar el movimiento."
                    data: null

  /api/movimiento/almacen/entrada:
    post:
      summary: Confirmar recepción en almacén
      description: |
        Confirma la recepción de un movimiento de stock en el almacén de destino.
        
        **Funcionalidad:**
        - Actualiza el campo `cantidad_entrada` en la tabla `lotes_grupos`
        - Actualiza el campo `cantidad_entrada_total` en la tabla `movimientos_stock` 
        - Registra la fecha de recepción y usuario receptor
        - Actualiza el stock en el almacén de destino
        - Cambia el status de lotes_grupos a 'recibido'
        - Marca `discrepancia = true` en lotes_grupos si cantidad_entrada ≠ cantidad_salida
        - Marca `discrepancia_total = true` si cantidad_entrada_total ≠ cantidad_salida_total
        - **Registra automáticamente** discrepancias en tabla `movimientos_discrepancias`
      tags: [Movimientos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovimientoPrincipalEntradaRequest'
            examples:
              recepcion-completa:
                value:
                  movimiento_stock_id: 1
                  fecha_recepcion: "2025-10-02"
                  user_id_receptor: 3
                  items:
                    - lote_id: 1
                      cantidad: 200
                    - lote_id: 2
                      cantidad: 100
              recepcion-con-discrepancia:
                value:
                  movimiento_stock_id: 1
                  fecha_recepcion: "2025-10-02"
                  user_id_receptor: 3
                  items:
                    - lote_id: 1
                      cantidad: 200
                    - lote_id: 2
                      cantidad: 80
      responses:
        '200':
          description: Respuesta del endpoint (éxito o error con status=false)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/MovimientoPrincipalEntradaResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
              examples:
                completado:
                  value:
                    status: true
                    mensaje: Recepción confirmada y stock actualizado.
                    data:
                      estado: recibido
                      discrepancias: []
                inconsistencias:
                  value:
                    status: true
                    mensaje: Recepción registrada con discrepancias. Se generó un reporte automático.
                    data:
                      estado: recibido
                      discrepancias:
                        - lote_id: 2
                          cantidad_esperada: 500
                          cantidad_recibida: 450
                items-no-entregados:
                  value:
                    status: false
                    mensaje: "Los items deben estar en estado \"entregado\" antes de poder ser recibidos. Estado actual: activo (pendiente)."
                    data: null
                movimiento-no-encontrado:
                  value:
                    status: false
                    mensaje: "No existe un movimiento con el ID indicado."
                    data: null
                estado-invalido-central:
                  value:
                    status: false
                    mensaje: "El movimiento debe estar en estado: entregado para poder ser recibido. Tipo de movimiento: con repartidor (Central → Principal). Estado actual: despachado"
                    data: null
                estado-invalido-principal:
                  value:
                    status: false
                    mensaje: "El movimiento debe estar en estado: despachado, entregado para poder ser recibido. Tipo de movimiento: interno (Principal → Otros almacenes). Estado actual: pendiente"
                    data: null
        '500':
          description: Error inesperado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/despachos-pacientes:
    get:
      summary: Listar despachos a pacientes
      tags: [Despachos Pacientes]
      security:
        - bearerAuth: []
      parameters:
        - name: hospital_id
          in: query
          schema: { type: integer }
        - name: sede_id
          in: query
          schema: { type: integer }
        - name: estado
          in: query
          schema: { type: string, enum: [pendiente, despachado, entregado, cancelado] }
        - name: paciente_cedula
          in: query
          schema: { type: string }
        - name: fecha_desde
          in: query
          schema: { type: string, format: date }
        - name: fecha_hasta
          in: query
          schema: { type: string, format: date }
        - name: per_page
          in: query
          schema: { type: integer, default: 15 }
      responses:
        '200':
          description: Lista de despachos
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: boolean }
                  data:
                    type: object
                    properties:
                      data: { type: array, items: { $ref: '#/components/schemas/DespachoPaciente' } }
                      current_page: { type: integer }
                      total: { type: integer }
    post:
      summary: Crear despacho a paciente
      tags: [Despachos Pacientes]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [hospital_id, sede_id, fecha_despacho, paciente_nombres, paciente_apellidos, paciente_cedula, items]
              properties:
                hospital_id: { type: integer }
                sede_id: { type: integer }
                fecha_despacho: { type: string, format: date }
                observaciones: { type: string }
                paciente_nombres: { type: string }
                paciente_apellidos: { type: string }
                paciente_cedula: { type: string }
                paciente_telefono: { type: string }
                paciente_direccion: { type: string }
                medico_tratante: { type: string }
                diagnostico: { type: string }
                indicaciones_medicas: { type: string }
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      lote_id: { type: integer }
                      cantidad: { type: integer }
      responses:
        '200':
          description: Despacho creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: boolean }
                  mensaje: { type: string }
                  data:
                    type: object
                    properties:
                      codigo_despacho: { type: string }
                      paciente: { type: object }
                      total_items: { type: integer }

  /api/despachos-pacientes/{id}:
    get:
      summary: Ver despacho específico
      tags: [Despachos Pacientes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Despacho encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: boolean }
                  data: { $ref: '#/components/schemas/DespachoPaciente' }
    put:
      summary: Actualizar despacho
      tags: [Despachos Pacientes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                observaciones: { type: string }
                paciente_telefono: { type: string }
                paciente_direccion: { type: string }
                medico_tratante: { type: string }
                diagnostico: { type: string }
                indicaciones_medicas: { type: string }
      responses:
        '200':
          description: Despacho actualizado
    delete:
      summary: Eliminar despacho
      tags: [Despachos Pacientes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Despacho eliminado

  /api/despachos-pacientes/{id}/confirmar-entrega:
    post:
      summary: Confirmar entrega del despacho
      tags: [Despachos Pacientes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                observaciones_entrega: { type: string }
      responses:
        '200':
          description: Entrega confirmada

  /api/despachos-pacientes/{id}/cancelar:
    post:
      summary: Cancelar despacho
      tags: [Despachos Pacientes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [motivo_cancelacion]
              properties:
                motivo_cancelacion: { type: string }
      responses:
        '200':
          description: Despacho cancelado

  /api/insumos/codigo/{codigo}:
    get:
      summary: Ver insumo por código
      tags: [Insumos]
      security:
        - bearerAuth: []
      parameters:
        - name: codigo
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Insumo encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar insumo por código
      tags: [Insumos]
      security:
        - bearerAuth: []
      parameters:
        - name: codigo
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsumoRequest'
      responses:
        '200':
          description: Insumo actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/insumos/sede/{sede_id}:
    get:
      summary: Listar insumos por sede
      tags: [Insumos]
      security:
        - bearerAuth: []
      parameters:
        - name: sede_id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Insumos de la sede
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/insumos/import:
    post:
      summary: Importar insumos desde archivo Excel
      tags: [Insumos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Importación procesada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # LOTES
  # ========================================
  /api/lotes:
    get:
      summary: Listar lotes
      tags: [Lotes]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listado de lotes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    post:
      summary: Crear lote
      tags: [Lotes]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoteRequest'
      responses:
        '201':
          description: Lote creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/lotes/{lote}:
    get:
      summary: Ver detalle de lote
      tags: [Lotes]
      security:
        - bearerAuth: []
      parameters:
        - name: lote
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Detalle del lote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    put:
      summary: Actualizar lote
      tags: [Lotes]
      security:
        - bearerAuth: []
      parameters:
        - name: lote
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoteRequest'
      responses:
        '200':
          description: Lote actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    delete:
      summary: Eliminar lote
      tags: [Lotes]
      security:
        - bearerAuth: []
      parameters:
        - name: lote
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Lote eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/lotes/{lote}/almacenes:
    get:
      summary: Ver almacenes de un lote
      tags: [Lotes]
      security:
        - bearerAuth: []
      parameters:
        - name: lote
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Almacenes del lote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    post:
      summary: Agregar lote a almacén
      tags: [Lotes]
      security:
        - bearerAuth: []
      parameters:
        - name: lote
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                almacen_id: { type: integer }
                cantidad: { type: integer }
      responses:
        '201':
          description: Lote agregado al almacén
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/lotes/{lote}/almacenes/{almacen_id}:
    delete:
      summary: Eliminar lote de almacén específico
      tags: [Lotes]
      security:
        - bearerAuth: []
      parameters:
        - name: lote
          in: path
          required: true
          schema: { type: integer }
        - name: almacen_id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Lote eliminado del almacén
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # LOTE-GRUPO
  # ========================================
  /api/lote-grupo:
    get:
      summary: Listar grupos de lote
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      parameters:
        - name: codigo
          in: query
          required: false
          schema: { type: string }
        - name: lote_id
          in: query
          required: false
          schema: { type: integer }
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [activo, inactivo]
      responses:
        '200':
          description: Lista de grupos de lote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    post:
      summary: Crear grupo de lote
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoteGrupoRequest'
      responses:
        '201':
          description: Grupo de lote creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/lote-grupo/{id}:
    put:
      summary: Actualizar grupo de lote
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cantidad: { type: integer, minimum: 1 }
                status: { type: string, enum: [activo, inactivo] }
      responses:
        '200':
          description: Grupo de lote actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    delete:
      summary: Eliminar grupo de lote
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Grupo de lote eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/lote-grupo/{codigo}:
    get:
      summary: Ver detalle de grupo de lote por código
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      parameters:
        - name: codigo
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Detalle del grupo de lote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/lote-grupo/crear-desde-movimiento:
    post:
      summary: Crear grupo de lote desde movimiento
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoteGrupoMovimientoRequest'
      responses:
        '201':
          description: Grupo de lote creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/lote-grupo/estadisticas:
    get:
      summary: Obtener estadísticas de grupos de lote
      tags: [LoteGrupo]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Estadísticas de grupos de lote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/distribucion/principal:
    post:
      summary: Distribución hacia almacén principal
      tags: [Distribución]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistribucionPrincipalRequest'
      responses:
        '200':
          description: Distribución aplicada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/movimientos-stock:
    get:
      summary: Listar movimientos de stock
      tags: [Movimientos]
      security:
        - bearerAuth: []
      parameters:
        - name: per_page
          in: query
          required: false
          schema: { type: integer, minimum: 1, maximum: 100 }
          description: Tamaño de página para la paginación (por defecto 50, máximo 100)
        - name: estado
          in: query
          required: false
          schema:
            type: string
            enum: [pendiente, completado, inconsistente, cancelado]
        - name: hospital_id
          in: query
          required: false
          schema: { type: integer }
        - name: sede_id
          in: query
          required: false
          schema: { type: integer }
        - name: codigo_grupo
          in: query
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Listado paginado de movimientos de stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
    post:
      summary: Crear movimiento de stock
      tags: [Movimientos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovimientoStockRequest'
            examples:
              crear-movimiento:
                value:
                  tipo: transferencia
                  tipo_movimiento: ajuste
                  hospital_id: 1
                  sede_id: 1
                  origen_almacen_tipo: almacenCent
                  origen_almacen_id: 1
                  destino_almacen_tipo: almacenPrin
                  destino_almacen_id: 2
                  cantidad: 50
                  fecha_despacho: '2025-10-01'
                  observaciones: 'Movimiento manual'
                  estado: pendiente
      responses:
        '201':
          description: Movimiento creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/movimientos-stock/{id}:
    get:
      summary: Obtener detalle de movimiento de stock
      tags: [Movimientos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Movimiento encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '404':
          description: Movimiento no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Actualizar movimiento de stock
      tags: [Movimientos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovimientoStockRequest'
            examples:
              actualizar-estado:
                value:
                  estado: completado
                  observaciones_recepcion: 'Recepción confirmada'
                  fecha_recepcion: '2025-10-02T10:00:00'
                  user_id_receptor: 5
      responses:
        '200':
          description: Movimiento actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '404':
          description: Movimiento no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Eliminar movimiento de stock
      tags: [Movimientos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Movimiento eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '404':
          description: Movimiento no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/movimientos-stock/destino_sede/{destino_sede_id}:
    get:
      summary: Listar movimientos de stock por sede destino
      tags: [Movimientos]
      security:
        - bearerAuth: []
      parameters:
        - name: destino_sede_id
          in: path
          required: true
          schema: { type: integer }
        - name: per_page
          in: query
          schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
        - name: estado
          in: query
          schema: { type: string, enum: [pendiente, completado, inconsistente, cancelado] }
        - name: destino_hospital_id
          in: query
          schema: { type: integer }
      responses:
        '200':
          description: Movimientos de stock por sede destino
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/movimientos-stock/origen_sede/{origen_sede_id}:
    get:
      summary: Listar movimientos de stock por sede origen
      tags: [Movimientos]
      security:
        - bearerAuth: []
      parameters:
        - name: origen_sede_id
          in: path
          required: true
          schema: { type: integer }
        - name: per_page
          in: query
          schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
        - name: estado
          in: query
          schema: { type: string, enum: [pendiente, completado, inconsistente, cancelado] }
        - name: origen_hospital_id
          in: query
          schema: { type: integer }
      responses:
        '200':
          description: Movimientos de stock por sede origen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'


  /api/ficha-insumos:
    get:
      summary: Listar fichas de insumos
      tags: [FichaInsumos]
      security:
        - bearerAuth: []
      parameters:
        - name: per_page
          in: query
          required: false
          schema: { type: integer, minimum: 1, maximum: 100 }
        - name: hospital_id
          in: query
          required: false
          schema: { type: integer }
        - name: insumo_id
          in: query
          required: false
          schema: { type: integer }
        - name: status
          in: query
          required: false
          schema: { type: boolean }
      responses:
        '200':
          description: Listado paginado de fichas de insumos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
    post:
      summary: Crear ficha de insumo
      tags: [FichaInsumos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FichaInsumoRequest'
            examples:
              crear-ficha:
                value:
                  hospital_id: 1
                  insumo_id: 45
                  cantidad: 120
                  status: true
      responses:
        '201':
          description: Ficha creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/ficha-insumos/{id}:
    get:
      summary: Obtener ficha de insumo
      tags: [FichaInsumos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Ficha encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '404':
          description: Ficha no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Actualizar ficha de insumo
      tags: [FichaInsumos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FichaInsumoRequest'
            examples:
              actualizar-ficha:
                value:
                  cantidad: 150
                  status: false
      responses:
        '200':
          description: Ficha actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '404':
          description: Ficha no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Eliminar ficha de insumo
      tags: [FichaInsumos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Ficha eliminada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '404':
          description: Ficha no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/distribucion/automatica/central:
    post:
      summary: Distribución automática desde central
      tags: [Distribución]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistribucionAutomaticaRequest'
      responses:
        '200':
          description: Distribución automática aplicada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # SEGUIMIENTOS (CRUD ADMINISTRACIÓN)
  # ========================================
  /api/seguimientos:
    get:
      summary: Listar seguimientos con filtros
      description: Obtiene una lista paginada de seguimientos con filtros opcionales
      tags: [Seguimientos]
      security:
        - bearerAuth: []
      parameters:
        - name: movimiento_stock_id
          in: query
          schema: { type: integer }
          description: Filtrar por ID de movimiento
        - name: estado
          in: query
          schema: { type: string, enum: [despachado, en_camino, entregado] }
          description: Filtrar por estado
        - name: status
          in: query
          schema: { type: string, enum: [activo, completado] }
          description: Filtrar por status
        - name: user_id_repartidor
          in: query
          schema: { type: integer }
          description: Filtrar por repartidor
        - name: per_page
          in: query
          schema: { type: integer, default: 15 }
          description: Elementos por página
      responses:
        '200':
          description: Lista de seguimientos obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
    post:
      summary: Crear nuevo seguimiento
      description: Crea un nuevo registro de seguimiento
      tags: [Seguimientos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeguimientoRequest'
            examples:
              nuevo-seguimiento:
                value:
                  movimiento_stock_id: 1
                  estado: "despachado"
                  ubicacion:
                    lat: 10.480138
                    lng: -66.913861
                    direccion: "Almacén Central Hospital A"
                  observaciones: "Salida del almacén central"
                  user_id_repartidor: 5
      responses:
        '201':
          description: Seguimiento creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/seguimientos/{id}:
    get:
      summary: Obtener seguimiento específico
      tags: [Seguimientos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Seguimiento obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '404':
          description: Seguimiento no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Actualizar seguimiento
      tags: [Seguimientos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeguimientoUpdateRequest'
      responses:
        '200':
          description: Seguimiento actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '404':
          description: Seguimiento no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Eliminar seguimiento
      tags: [Seguimientos]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Seguimiento eliminado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '404':
          description: Seguimiento no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/seguimientos/movimiento/{movimiento_stock_id}:
    get:
      summary: Obtener seguimientos por movimiento
      description: Obtiene todos los seguimientos de un movimiento específico
      tags: [Seguimientos]
      security:
        - bearerAuth: []
      parameters:
        - name: movimiento_stock_id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Seguimientos del movimiento obtenidos exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # REPARTIDOR
  # ========================================
  /api/repartidor/seguimiento:
    post:
      summary: Actualizar seguimiento del repartidor
      description: |
        Permite al repartidor actualizar el estado de un movimiento.
        
        **Estados disponibles:**
        - `despachado`: Movimiento sale del origen
        - `en_camino`: Movimiento en tránsito (con ubicación GPS)
        - `entregado`: Movimiento llega al destino
        
        **Efectos:**
        - Crea registro en tabla `seguimientos`
        - Actualiza estado en `movimientos_stock`
        - Si estado = 'entregado', cambia `lotes_grupos` a 'entregado'
      tags: [Repartidor]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepartidorSeguimientoRequest'
            examples:
              despachado:
                value:
                  movimiento_stock_id: 1
                  estado: "despachado"
                  observaciones: "Saliendo del almacén central"
              en-camino:
                value:
                  movimiento_stock_id: 1
                  estado: "en_camino"
                  ubicacion:
                    lat: 10.485123
                    lng: -66.918456
                    direccion: "Av. Principal, cerca del Hospital B"
                  observaciones: "En ruta hacia el destino"
              entregado:
                value:
                  movimiento_stock_id: 1
                  estado: "entregado"
                  ubicacion:
                    lat: 10.490000
                    lng: -66.920000
                    direccion: "Hospital B - Almacén Principal"
                  observaciones: "Entregado al encargado del almacén"
      responses:
        '200':
          description: Respuesta del endpoint (éxito o error con status=false)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
              examples:
                despachado:
                  value:
                    status: true
                    mensaje: "Movimiento marcado como despachado."
                    data: null
                en-camino:
                  value:
                    status: true
                    mensaje: "Ubicación actualizada - En camino."
                    data: null
                entregado:
                  value:
                    status: true
                    mensaje: "Movimiento marcado como entregado."
                    data: null
                error-validacion:
                  value:
                    status: false
                    mensaje: "Error de validación en los datos proporcionados."
                    data: null

  /api/repartidor/seguimiento/{movimiento_stock_id}:
    get:
      summary: Obtener historial de seguimiento
      description: Obtiene el historial completo de seguimiento de un movimiento
      tags: [Repartidor]
      security:
        - bearerAuth: []
      parameters:
        - name: movimiento_stock_id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Historial de seguimiento obtenido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '404':
          description: No se encontró seguimiento para este movimiento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/repartidor/movimientos:
    get:
      summary: Obtener movimientos asignados al repartidor
      description: Lista todos los movimientos asignados al repartidor autenticado
      tags: [Repartidor]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Movimientos del repartidor obtenidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  # ========================================
  # DISCREPANCIAS
  # ========================================
  # Las discrepancias se registran automáticamente cuando hay diferencias
  # entre cantidad_salida y cantidad_entrada en lotes_grupos durante la recepción.
  # También se pueden registrar manualmente para casos especiales.
  /api/movimientos-stock/discrepancias:
    get:
      summary: Listar discrepancias de movimientos
      description: Obtiene una lista paginada de discrepancias registradas
      tags: [Discrepancias]
      security:
        - bearerAuth: []
      parameters:
        - name: movimiento_stock_id
          in: query
          schema: { type: integer }
          description: Filtrar por ID de movimiento
        - name: codigo_lote_grupo
          in: query
          schema: { type: string }
          description: Filtrar por código de lote grupo
        - name: per_page
          in: query
          schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
          description: Elementos por página
        - name: page
          in: query
          schema: { type: integer }
          description: Número de página
      responses:
        '200':
          description: Listado paginado de discrepancias
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
    post:
      summary: Registrar discrepancia de movimiento
      description: Crea un nuevo registro de discrepancia
      tags: [Discrepancias]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovimientoDiscrepanciaRequest'
            examples:
              nueva-discrepancia:
                value:
                  movimiento_stock_id: 15
                  codigo_lote_grupo: "LG-2025-001"
                  cantidad_esperada: 100
                  cantidad_recibida: 95
                  observaciones: "Faltaron 5 unidades del lote"
      responses:
        '201':
          description: Discrepancia registrada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/movimientos-stock/discrepancias/{id}:
    get:
      summary: Obtener detalle de discrepancia
      tags: [Discrepancias]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Detalle de discrepancia obtenido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '404':
          description: Discrepancia no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Actualizar discrepancia
      tags: [Discrepancias]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovimientoDiscrepanciaRequest'
            examples:
              actualizar-discrepancia:
                value:
                  cantidad_recibida: 95
                  observaciones: 'Se ajustó tras reconteo'
      responses:
        '200':
          description: Discrepancia actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '404':
          description: Discrepancia no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Eliminar discrepancia
      tags: [Discrepancias]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Discrepancia eliminada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '404':
          description: Discrepancia no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ========================================
  # INVENTARIO
  # ========================================
  /api/inventario/registrar:
    post:
      summary: Registrar inventario
      tags: [Inventario]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                almacen_id: { type: integer }
                items: { type: array }
      responses:
        '200':
          description: Inventario registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/inventario/sede/{sede_id}:
    get:
      summary: Obtener inventario por sede
      description: Devuelve los insumos agrupados por insumo_id desde la tabla almacenCentral, filtrando por sede_id y status=true
      tags: [Inventario]
      security:
        - bearerAuth: []
      parameters:
        - name: sede_id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la sede
      responses:
        '200':
          description: Listado de inventario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'


  # ========================================
  # TIPOS HOSPITAL DISTRIBUCIONES
  # ========================================
  /api/tipos_hospital_distribuciones:
    get:
      summary: Listar distribución de tipos de hospitales
      tags: [TiposHospitalDistribucion]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listado de distribuciones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

    post:
      summary: Crear distribución de tipo de hospital
      tags: [TiposHospitalDistribucion]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tipo, porcentaje]
              properties:
                tipo: { type: string }
                porcentaje: { type: number, format: float }
      responses:
        '200':
          description: Distribución creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

  /api/tipos_hospital_distribuciones/{id}:
    get:
      summary: Ver detalle de distribución
      tags: [TiposHospitalDistribucion]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Detalle de la distribución
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

# ========================================
# COMPONENTS
# ========================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    StandardResponse:
      type: object
      properties:
        status:
          type: boolean
          description: Indica si la operación fue exitosa
        mensaje:
          type: string
          description: Mensaje descriptivo del resultado
        data:
          type: object
          nullable: true
          description: Datos de la respuesta (opcional)

    ErrorResponse:
      type: object
      properties:
        status:
          type: boolean
          example: false
        mensaje:
          type: string
          example: "Error descriptivo"
        errors:
          type: object
          nullable: true
          example: {"campo": ["El campo es requerido"]}

    DespachoPaciente:
      type: object
      properties:
        id: { type: integer }
        hospital_id: { type: integer }
        sede_id: { type: integer }
        almacen_tipo: { type: string }
        fecha_despacho: { type: string, format: date }
        observaciones: { type: string, nullable: true }
        paciente_nombres: { type: string }
        paciente_apellidos: { type: string }
        paciente_cedula: { type: string }
        paciente_telefono: { type: string, nullable: true }
        paciente_direccion: { type: string, nullable: true }
        medico_tratante: { type: string, nullable: true }
        diagnostico: { type: string, nullable: true }
        indicaciones_medicas: { type: string, nullable: true }
        codigo_despacho: { type: string }
        cantidad_total_items: { type: integer }
        valor_total: { type: number, format: decimal, nullable: true }
        estado: { type: string, enum: [pendiente, despachado, entregado, cancelado] }
        fecha_entrega: { type: string, format: datetime, nullable: true }
        user_id: { type: integer }
        user_id_entrega: { type: integer, nullable: true }
        status: { type: boolean }
        created_at: { type: string, format: datetime }
        updated_at: { type: string, format: datetime }
        hospital: { type: object, nullable: true }
        sede: { type: object, nullable: true }
        usuario: { type: object, nullable: true }
        usuario_entrega: { type: object, nullable: true }
        lotes: { type: array, items: { type: object }, nullable: true }

    UserRequest:
      type: object
      properties:
        name: { type: string }
        email: { type: string, format: email }
        password: { type: string, format: password }

    HospitalRequest:
      type: object
      properties:
        nombre: { type: string }
        rif: { type: string }
        direccion: { type: string }
        telefono: { type: string }

    SedeRequest:
      type: object
      properties:
        nombre: { type: string }
        hospital_id: { type: integer }
        direccion: { type: string }
        telefono: { type: string }

    AlmacenPrincipalRequest:
      type: object
      properties:
        nombre: { type: string }
        sede_id: { type: integer }
        descripcion: { type: string }

    AlmacenCentralRequest:
      type: object
      properties:
        nombre: { type: string }
        sede_id: { type: integer }
        descripcion: { type: string }

    AlmacenFarmaciaRequest:
      type: object
      properties:
        nombre: { type: string }
        sede_id: { type: integer }
        descripcion: { type: string }

    AlmacenParaleloRequest:
      type: object
      properties:
        nombre: { type: string }
        sede_id: { type: integer }
        descripcion: { type: string }

    AlmacenServiciosAtencionesRequest:
      type: object
      properties:
        nombre: { type: string }
        sede_id: { type: integer }
        descripcion: { type: string }

    AlmacenServiciosApoyoRequest:
      type: object
      properties:
        nombre: { type: string }
        sede_id: { type: integer }
        descripcion: { type: string }

    InsumoRequest:
      type: object
      properties:
        codigo: { type: string }
        descripcion: { type: string }
        unidad_medida: { type: string }
        tipo: { type: string }

    LoteRequest:
      type: object
      properties:
        numero_lote: { type: string }
        fecha_vencimiento: { type: string, format: date }
        cantidad_inicial: { type: integer }

    LoteGrupoRequest:
      type: object
      properties:
        codigo: { type: string }
        items: { type: array }

    LoteGrupoMovimientoRequest:
      type: object
      properties:
        origen_central_id: { type: integer }
        hospital_id: { type: integer }
        principal_id: { type: integer }
        tipo_movimiento: { type: string }
        fecha_despacho: { type: string, format: date }
        items: { type: array }

    MovimientoCentralSalidaRequest:
      type: object
      required: 
        - origen_hospital_id
        - origen_sede_id
        - destino_hospital_id
        - destino_sede_id
        - origen_almacen_tipo
        - destino_almacen_tipo
        - tipo_movimiento
        - fecha_despacho
        - items
      properties:
        origen_hospital_id:
          type: integer
          minimum: 1
          description: ID del hospital de origen
        origen_sede_id:
          type: integer
          minimum: 1
          description: ID de la sede de origen
        destino_hospital_id:
          type: integer
          minimum: 1
          description: ID del hospital de destino
        destino_sede_id:
          type: integer
          minimum: 1
          description: ID de la sede de destino
        origen_almacen_tipo:
          type: string
          maxLength: 100
          description: Tipo de almacén de origen
          example: almacenCent
          enum: [almacenCent]
        destino_almacen_tipo:
          type: string
          maxLength: 100
          description: Tipo de almacén de destino
          example: almacenPrin
          enum: [almacenPrin, almacenFarm, almacenPar, almacenServApoyo, almacenServAtencion]
        tipo_movimiento:
          type: string
          maxLength: 50
          description: Tipo de movimiento
          example: despacho
        fecha_despacho:
          type: string
          format: date
          description: Fecha del despacho
        observaciones:
          type: string
          nullable: true
          maxLength: 500
          description: Observaciones del movimiento
        items:
          type: array
          minItems: 1
          description: Lista de lotes y cantidades a transferir
          items:
            type: object
            required: [lote_id, cantidad]
            properties:
              lote_id:
                type: integer
                minimum: 1
                description: ID del lote a transferir
              cantidad:
                type: integer
                minimum: 1
                description: Cantidad a transferir del lote

    MovimientoPrincipalEntradaRequest:
      type: object
      required: [movimiento_stock_id, fecha_recepcion, user_id_receptor, items]
      properties:
        movimiento_stock_id:
          type: integer
          minimum: 1
          description: ID del movimiento de stock a recibir
        fecha_recepcion:
          type: string
          format: date
          description: Fecha de recepción de los items
        user_id_receptor:
          type: integer
          minimum: 1
          description: ID del usuario que recibe los items
        items:
          type: array
          minItems: 1
          description: Lista de lotes recibidos con sus cantidades
          items:
            type: object
            required: [lote_id, cantidad]
            properties:
              lote_id:
                type: integer
                minimum: 1
                description: ID del lote recibido
              cantidad:
                type: integer
                minimum: 1
                description: Cantidad recibida del lote

    MovimientoPrincipalEntradaResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        mensaje:
          type: string
          example: Recepción confirmada y stock actualizado.
        data:
          type: object
          properties:
            estado:
              type: string
              enum: [completado, inconsistente]
            discrepancias:
              type: array
              items:
                type: object
                properties:
                  lote_id:
                    type: integer
                  cantidad_esperada:
                    type: integer
                  cantidad_recibida:
                    type: integer

    MovimientoStockRequest:
      type: object
      required:
        - tipo
        - tipo_movimiento
        - destino_hospital_id
        - destino_sede_id
        - origen_almacen_tipo
        - origen_almacen_id
        - destino_almacen_tipo
        - destino_almacen_id
        - cantidad
      properties:
        tipo:
          type: string
          maxLength: 50
          example: transferencia
        tipo_movimiento:
          type: string
          maxLength: 50
          example: despacho
        origen_hospital_id:
          type: integer
          nullable: true
          minimum: 1
        origen_sede_id:
          type: integer
          nullable: true
          minimum: 1
        destino_hospital_id:
          type: integer
          minimum: 1
        destino_sede_id:
          type: integer
          minimum: 1
        origen_almacen_tipo:
          type: string
          maxLength: 100
          example: almacenCent
        origen_almacen_id:
          type: integer
          minimum: 0
        destino_almacen_tipo:
          type: string
          maxLength: 100
          example: almacenPrin
        destino_almacen_id:
          type: integer
          minimum: 0
        cantidad:
          type: integer
          minimum: 0
        fecha_despacho:
          type: string
          format: date
        observaciones:
          type: string
          nullable: true
          maxLength: 500
        fecha_recepcion:
          type: string
          format: date
          nullable: true
        observaciones_recepcion:
          type: string
          nullable: true
          maxLength: 500
        estado:
          type: string
          enum: [pendiente, completado, inconsistente, cancelado]
        codigo_grupo:
          type: string
          nullable: true
          maxLength: 50
        user_id:
          type: integer
          minimum: 1
        user_id_receptor:
          type: integer
          nullable: true
          minimum: 1

    MovimientoDiscrepanciaRequest:
      type: object
      properties:
        movimiento_stock_id:
          type: integer
          minimum: 1
          description: ID del movimiento de stock
        codigo_lote_grupo:
          type: string
          maxLength: 50
          description: Código del lote grupo donde ocurrió la discrepancia
        cantidad_esperada:
          type: integer
          minimum: 0
          description: Cantidad que se esperaba recibir
        cantidad_recibida:
          type: integer
          minimum: 0
          description: Cantidad que realmente se recibió
        observaciones:
          type: string
          nullable: true
          maxLength: 500
          description: Observaciones sobre la discrepancia

    FichaInsumoRequest:
      type: object
      properties:
        hospital_id:
          type: integer
          minimum: 1
        insumo_id:
          type: integer
          minimum: 1
        cantidad:
          type: integer
          minimum: 0
        status:
          type: boolean

    DistribucionPrincipalRequest:
      type: object
      properties:
        origen_central_id: { type: integer }
        items: { type: array }

    DistribucionAutomaticaRequest:
      type: object
      properties:
        lote_ids: { type: array, items: { type: integer } }
        estrategia: { type: string, enum: [porcentaje] }

    # Seguimientos Schemas
    SeguimientoRequest:
      type: object
      required: [movimiento_stock_id, estado, user_id_repartidor]
      properties:
        movimiento_stock_id:
          type: integer
          minimum: 1
          description: ID del movimiento de stock
        ubicacion:
          type: object
          nullable: true
          properties:
            lat:
              type: number
              description: Latitud GPS
            lng:
              type: number
              description: Longitud GPS
            direccion:
              type: string
              maxLength: 500
              description: Dirección textual
        estado:
          type: string
          enum: [despachado, en_camino, entregado]
          description: Estado del seguimiento
        status:
          type: string
          enum: [activo, completado]
          default: activo
          description: Status del seguimiento
        observaciones:
          type: string
          maxLength: 1000
          nullable: true
          description: Observaciones del repartidor
        user_id_repartidor:
          type: integer
          minimum: 1
          description: ID del usuario repartidor

    SeguimientoUpdateRequest:
      type: object
      properties:
        ubicacion:
          type: object
          nullable: true
          properties:
            lat:
              type: number
            lng:
              type: number
            direccion:
              type: string
              maxLength: 500
        estado:
          type: string
          enum: [despachado, en_camino, entregado]
        status:
          type: string
          enum: [activo, completado]
        observaciones:
          type: string
          maxLength: 1000
          nullable: true

    SeguimientoResponse:
      type: object
      properties:
        id:
          type: integer
        movimiento_stock_id:
          type: integer
        ubicacion:
          type: object
          nullable: true
        estado:
          type: string
        status:
          type: string
        observaciones:
          type: string
          nullable: true
        user_id_repartidor:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        movimiento_stock:
          type: object
        repartidor:
          type: object
          properties:
            id:
              type: integer
            nombre:
              type: string
            apellido:
              type: string

    # Repartidor Schemas
    RepartidorSeguimientoRequest:
      type: object
      required: [movimiento_stock_id, estado]
      properties:
        movimiento_stock_id:
          type: integer
          minimum: 1
          description: ID del movimiento a actualizar
        estado:
          type: string
          enum: [despachado, en_camino, entregado]
          description: Nuevo estado del movimiento
        ubicacion:
          type: object
          nullable: true
          properties:
            lat:
              type: number
              description: Latitud GPS actual
            lng:
              type: number
              description: Longitud GPS actual
            direccion:
              type: string
              maxLength: 500
              description: Dirección actual
        observaciones:
          type: string
          maxLength: 1000
          nullable: true
          description: Observaciones del repartidor
